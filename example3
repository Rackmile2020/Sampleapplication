import { Injectable } from '@angular/core';
import { CanActivate, ActivatedRouteSnapshot, Router, RouterStateSnapshot } from '@angular/router';
import { Observable, of } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
import { MembershipService, MembershipResponse } from './membership.service';

@Injectable({ providedIn: 'root' })
export class MembershipGuard implements CanActivate {
  constructor(
    private membershipService: MembershipService,
    private router: Router
  ) {}

  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {
    const memberId = route.parent?.paramMap.get('id'); // assume parent has /:id
    const requestedTab = route.routeConfig?.path ?? '';

    if (!memberId) {
      this.router.navigate(['/home']);
      return of(false);
    }

    return this.membershipService.getMembership(memberId).pipe(
      map((response: MembershipResponse | false) => {
        if (response === false) {
          this.router.navigate(['/home']);
          return false;
        }

        if (!response.allowedTabs.includes(requestedTab)) {
          this.router.navigate(['/home']);
          return false;
        }

        return true; // âœ… valid + allowed
      }),
      catchError(() => {
        this.router.navigate(['/home']);
        return of(false);
      })
    );
  }
}
