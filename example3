import { Injectable, ComponentRef, Type, ViewContainerRef } from '@angular/core';
import { loadRemoteModule } from '@angular-architects/module-federation';

@Injectable({ providedIn: 'root' })
export class SkeletonLoaderService {
  private skeletonComponent!: Type<any>;

  async loadSkeleton(container: ViewContainerRef, data?: any): Promise<ComponentRef<any>> {
    try {
      if (!this.skeletonComponent) {
        const module = await loadRemoteModule({
          type: 'module',
          remoteEntry: '/mpa/responsive/app/mpa/remoteEntry.js',
          exposedModule: './GlobalSkeletonModule',
        });
        this.skeletonComponent = module.GlobalSkeletonModule.getComponent();
      }

      container.clear();
      const componentRef = container.createComponent(this.skeletonComponent);

      if (data) {
        Object.assign(componentRef.instance, data);
      }

      return componentRef;
    } catch (err) {
      console.error('Error loading skeleton component:', err);
      throw err;
    }
  }
}

ngAfterViewInit() {
  this.skeletonLoader.loadSkeleton(this.skeletonContainer, { some: 'payload' })
    .then(ref => {
      // you can keep reference if needed
      // this.componentRef = ref;
    });
}
