
import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class FocusTrapService {
  private renderer: Renderer2;
  private focusableElements: HTMLElement[] = [];
  private activeElementBeforeTrap: HTMLElement | null = null;
  private listenerCleanup: (() => void) | null = null;

  constructor(private rendererFactory: RendererFactory2) {
    this.renderer = this.rendererFactory.createRenderer(null, null);
  }

  trapFocus(container: HTMLElement, onEscape?: () => void) {
    this.activeElementBeforeTrap = document.activeElement as HTMLElement;

    // Ensure dialog can be focused
    if (!container.hasAttribute('tabindex')) {
      container.setAttribute('tabindex', '-1');
    }

    // Focus the dialog itself (important for accessibility)
    container.focus();

    // Gather all focusable elements inside
    this.focusableElements = Array.from(
      container.querySelectorAll(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      )
    ) as HTMLElement[];

    // Add keyboard listeners
    this.listenerCleanup = this.renderer.listen(container, 'keydown', (event: KeyboardEvent) => {
      if (event.key === 'Tab') {
        this.handleTab(event);
      } else if (event.key === 'Escape' && onEscape) {
        onEscape();
      }
    });
  }

  private handleTab(event: KeyboardEvent) {
    const first = this.focusableElements[0];
    const last = this.focusableElements[this.focusableElements.length - 1];

    if (event.shiftKey) {
      if (document.activeElement === first) {
        event.preventDefault();
        last.focus();
      }
    } else {
      if (document.activeElement === last) {
        event.preventDefault();
        first.focus();
      }
    }
  }

  releaseFocus() {
    if (this.listenerCleanup) {
      this.listenerCleanup();
      this.listenerCleanup = null;
    }

    if (this.activeElementBeforeTrap) {
      this.activeElementBeforeTrap.focus();
      this.activeElementBeforeTrap = null;
    }

    this.focusableElements = [];
  }
}
