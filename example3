// member.actions.ts
import { createAction, props } from '@ngrx/store';

export const loadMember = createAction(
  '[Member] Load Member',
  props<{ memberId: string }>()
);

export const loadMemberSuccess = createAction(
  '[Member] Load Member Success',
  props<{ memberId: string; data: any }>()
);

export const loadMemberFailure = createAction(
  '[Member] Load Member Failure',
  props<{ error: any }>()
);
// member.reducer.ts
import { createReducer, on } from '@ngrx/store';
import * as MemberActions from './member.actions';

export interface MemberState {
  entities: { [id: string]: any };
  loading: boolean;
}

export const initialState: MemberState = {
  entities: {},
  loading: false
};

export const memberReducer = createReducer(
  initialState,
  on(MemberActions.loadMember, (state) => ({
    ...state,
    loading: true
  })),
  on(MemberActions.loadMemberSuccess, (state, { memberId, data }) => ({
    ...state,
    loading: false,
    entities: {
      ...state.entities,
      [memberId]: data
    }
  })),
  on(MemberActions.loadMemberFailure, (state) => ({
    ...state,
    loading: false
  }))
);
// member.selectors.ts
import { createSelector, createFeatureSelector } from '@ngrx/store';
import { MemberState } from './member.reducer';

export const selectMemberState = createFeatureSelector<MemberState>('members');

export const selectMemberById = (memberId: string) =>
  createSelector(selectMemberState, (state: MemberState) => state.entities[memberId]);
// member.effects.ts
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { MemberService } from '../member.service';
import * as MemberActions from './member.actions';
import { catchError, map, mergeMap, of } from 'rxjs';

@Injectable()
export class MemberEffects {
  loadMember$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MemberActions.loadMember),
      mergeMap(({ memberId }) =>
        this.memberService.getMemberById(memberId).pipe(
          map((data) =>
            MemberActions.loadMemberSuccess({ memberId, data })
          ),
          catchError((error) =>
            of(MemberActions.loadMemberFailure({ error }))
          )
        )
      )
    )
  );

  constructor(
    private actions$: Actions,
    private memberService: MemberService
  ) {}
}
