import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class BackDetectorService {
  private backNavSubject = new BehaviorSubject<boolean>(false);
  public backNav$ = this.backNavSubject.asObservable();

  private lastUrl: string | null = null;

  constructor(private router: Router) {
    this.router.events
      .pipe(filter(e => e instanceof NavigationStart))
      .subscribe((event: NavigationStart & { navigationTrigger?: string }) => {
        const trigger = event.navigationTrigger;
        const currentUrl = event.url;

        // 🔹 Detect browser back
        if (trigger === 'popstate') {
          this.backNavSubject.next(true);
          console.log('⬅️ Browser BACK detected:', currentUrl);
        } else {
          // 🔹 Normal navigation
          this.backNavSubject.next(false);
        }

        // 🔹 Update last URL after checking back
        this.lastUrl = currentUrl;
      });
  }

  /** True only during a back navigation moment */
  public isBackNavigation(): boolean {
    return this.backNavSubject.getValue();
  }

  /** Returns the last visited URL */
  public getLastUrl(): string | null {
    return this.lastUrl;
  }
}
