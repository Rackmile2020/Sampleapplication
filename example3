public validateMember(
  memberId: any,
  memberView: any,
  requestViewTab: any
): Observable<boolean | UrlTree> {
  return from(this.bridge.loadExposedModule()).pipe(
    switchMap(() =>
      this.parentStore
        .select(PARENT_STORE_CMS.RESPSHARED)
        .pipe(
          distinctUntilChanged(
            (prev, curr) => JSON.stringify(prev) === JSON.stringify(curr)
          ),
          take(1),
          switchMap((respShared) => {
            if (!respShared) {
              return of(false);
            }

            // convert respShared to your memberships
            const allAccessibleMemberships = new BaseMemberships(
              JSON.parse(JSON.stringify(respShared))
            );

            const currentMembership = allAccessibleMemberships
              .getMyMemberships()
              .find((m: any) => m.attributes.id === Number(memberId));

            const isValidMembership = !!currentMembership;
            const isActiveMembership =
              isValidMembership && !currentMembership.isFutureActive();

            if (!isValidMembership) {
              return of(false);
            }

            // if you need to deep link
            return this.deeplinkWithNtMember(
              memberId,
              requestViewTab,
              currentMembership
            ).pipe(
              map((route) => {
                if (route) {
                  return this.router.createUrlTree([route]); // redirect
                }
                return true; // allow navigation
              })
            );
          })
        )
    )
  );
}
