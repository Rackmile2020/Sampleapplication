// member.reducer.ts
import { createReducer, on } from '@ngrx/store';
import * as MemberActions from './member.actions';

export interface Member {
  id: string;
  name: string;
  // ... other fields
}

export interface MemberState {
  entities: { [id: string]: Member };  // cache by id
  loadingIds: string[];                // track loading per memberId
  error?: string;
}

export const initialState: MemberState = {
  entities: {},
  loadingIds: [],
  error: undefined
};

export const memberReducer = createReducer(
  initialState,

  // Start loading
  on(MemberActions.loadMember, (state, { memberId }) => ({
    ...state,
    loadingIds: [...state.loadingIds, memberId]
  })),

  // Success
  on(MemberActions.loadMemberSuccess, (state, { member }) => {
    const { id } = member;
    return {
      ...state,
      entities: {
        ...state.entities,
        [id]: member
      },
      loadingIds: state.loadingIds.filter(x => x !== id)
    };
  }),

  // Failure
  on(MemberActions.loadMemberFailure, (state, { memberId, error }) => ({
    ...state,
    loadingIds: state.loadingIds.filter(x => x !== memberId),
    error
  }))
);
///  
// member.actions.ts
import { createAction, props } from '@ngrx/store';
import { Member } from './member.reducer';

export const loadMember = createAction(
  '[Member] Load Member',
  props<{ memberId: string }>()
);

export const loadMemberSuccess = createAction(
  '[Member] Load Member Success',
  props<{ member: Member }>()
);

export const loadMemberFailure = createAction(
  '[Member] Load Member Failure',
  props<{ memberId: string; error: any }>()
);
//
// member.selectors.ts
import { createFeatureSelector, createSelector } from '@ngrx/store';
import { MemberState } from './member.reducer';

export const selectMemberState = createFeatureSelector<MemberState>('member');

export const selectMemberEntities = createSelector(
  selectMemberState,
  state => state.entities
);

export const selectMemberById = (memberId: string) =>
  createSelector(selectMemberEntities, entities => entities[memberId]);

export const selectLoadingIds = createSelector(
  selectMemberState,
  state => state.loadingIds
);

export const selectIsLoading = (memberId: string) =>
  createSelector(selectLoadingIds, ids => ids.includes(memberId));
/ ssssssssssssssssssssssssssssssssssssssssssssssssss

  member$ = this.store.select(MemberSelectors.selectMemberById(this.memberId));
  loading$ = this.store.select(MemberSelectors.selectIsLoading(this.memberId));

  constructor(private store: Store) {
    this.store.dispatch(MemberActions.loadMember({ memberId: this.memberId }));
  }
