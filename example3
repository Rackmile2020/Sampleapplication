import { Injectable } from '@angular/core';
import { Router, NavigationStart, NavigationEnd, Event } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class BackDetectorService {
  private backNavSubject = new BehaviorSubject<boolean>(false);
  public backNav$ = this.backNavSubject.asObservable();

  private lastTrigger: 'popstate' | 'imperative' | 'unknown' = 'unknown';

  constructor(private router: Router) {
    this.router.events
      .pipe(filter((e: Event): e is NavigationStart => e instanceof NavigationStart))
      .subscribe(event => {
        const trigger = (event as any).navigationTrigger;
        if (trigger === 'popstate') {
          this.lastTrigger = 'popstate';
          this.backNavSubject.next(true);
          console.log('⬅️ Back detected:', event.url);
        } else {
          this.lastTrigger = 'imperative';
          this.backNavSubject.next(false);
        }
      });

    // 🔹 Reset AFTER navigation completes (not immediately)
    this.router.events
      .pipe(filter((e: Event): e is NavigationEnd => e instanceof NavigationEnd))
      .subscribe(() => {
        if (this.lastTrigger === 'popstate') {
          // Keep back = true until guards finish
          setTimeout(() => this.backNavSubject.next(false), 50);
        }
      });
  }

  public isBackNavigation(): boolean {
    return this.backNavSubject.getValue();
  }
}
