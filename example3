import { createAction, props } from '@ngrx/store';
import { Member } from './member.model';

export const loadMember = createAction(
  '[Member] Load Member',
  props<{ memberId: string }>()
);

export const loadMemberSuccess = createAction(
  '[Member] Load Member Success',
  props<{ member: Member }>()
);

export const loadMemberFailure = createAction(
  '[Member] Load Member Failure',
  props<{ error: any }>()
);
////////////////
import { createReducer, on } from '@ngrx/store';
import { createEntityAdapter, EntityState } from '@ngrx/entity';
import * as MemberActions from './member.actions';

export interface Member {
  id: string;
  name: string;
  age: number;
}

export interface MemberState extends EntityState<Member> {
  loading: boolean;
  error: any;
}

export const adapter = createEntityAdapter<Member>({
  selectId: (member) => member.id
});

export const initialState: MemberState = adapter.getInitialState({
  loading: false,
  error: null
});

export const memberReducer = createReducer(
  initialState,

  on(MemberActions.loadMember, (state) => ({
    ...state,
    loading: true
  })),

  on(MemberActions.loadMemberSuccess, (state, { member }) =>
    adapter.upsertOne(member, { ...state, loading: false })
  ),

  on(MemberActions.loadMemberFailure, (state, { error }) => ({
    ...state,
    loading: false,
    error
  }))
);
/////////////////////////////
import { createSelector } from '@ngrx/store';
import { adapter, MemberState } from './member.reducer';

export const selectMemberState = (state: any) => state.members;

const { selectEntities } = adapter.getSelectors();

export const selectMemberEntities = createSelector(
  selectMemberState,
  selectEntities
);

export const selectMemberById = (memberId: string) =>
  createSelector(selectMemberEntities, (entities) => entities[memberId]);
//////////////////////////////
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType, concatLatestFrom } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { of } from 'rxjs';
import { catchError, map, switchMap } from 'rxjs/operators';
import * as MemberActions from './member.actions';
import { selectMemberById } from './member.selectors';
import { MemberService } from '../services/member.service';

@Injectable()
export class MemberEffects {
  constructor(
    private actions$: Actions,
    private store: Store,
    private memberService: MemberService
  ) {}

  loadMember$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MemberActions.loadMember),
      concatLatestFrom((action) =>
        this.store.select(selectMemberById(action.memberId))
      ),
      switchMap(([action, cached]) => {
        if (cached) {
          // ✅ already in store
          return of(MemberActions.loadMemberSuccess({ member: cached }));
        } else {
          // ✅ fetch from API
          return this.memberService.getMember(action.memberId).pipe(
            map((member) => MemberActions.loadMemberSuccess({ member })),
            catchError((error) =>
              of(MemberActions.loadMemberFailure({ error }))
            )
          );
        }
      })
    )
  );
}
