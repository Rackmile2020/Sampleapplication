import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class BackDetectorService {
  private backNavSubject = new BehaviorSubject<boolean>(false);
  public backNav$ = this.backNavSubject.asObservable();

  private urlHistory: string[] = [];

  constructor(private router: Router) {
    this.router.events
      .pipe(filter(e => e instanceof NavigationStart))
      .subscribe((event: NavigationStart & { navigationTrigger?: string }) => {
        const trigger = event.navigationTrigger;
        const currentUrl = event.url;

        // 🔹 First page visit: push into history
        if (!this.urlHistory.length) {
          this.urlHistory.push(currentUrl);
          return;
        }

        const lastIndex = this.urlHistory.lastIndexOf(currentUrl);

        // 🔹 Detect browser back click
        // If the URL exists earlier in stack, or it's the previous one
        if (trigger === 'popstate' && lastIndex < this.urlHistory.length - 1) {
          this.backNavSubject.next(true);
          console.log('⬅️ Browser BACK detected:', currentUrl);

          // Remove all URLs ahead of current to maintain stack
          this.urlHistory = this.urlHistory.slice(0, lastIndex + 1);
        } else {
          // Normal navigation or forward
          const lastUrl = this.urlHistory[this.urlHistory.length - 1];
          if (lastUrl !== currentUrl) {
            this.urlHistory.push(currentUrl);
          }

          // Reset back flag if not a back
          if (trigger !== 'popstate') {
            this.backNavSubject.next(false);
          }
        }
      });
  }

  /** True only during a back navigation moment */
  public isBackNavigation(): boolean {
    return this.backNavSubject.getValue();
  }

  /** Previous URL in history */
  public getPreviousUrl(): string | null {
    return this.urlHistory.length > 1
      ? this.urlHistory[this.urlHistory.length - 2]
      : null;
  }

  /** Current URL */
  public getCurrentUrl(): string | null {
    return this.urlHistory.length
      ? this.urlHistory[this.urlHistory.length - 1]
      : null;
  }
}
