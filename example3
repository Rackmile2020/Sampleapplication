import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class BackDetectorService {
  private backNavSubject = new BehaviorSubject<boolean>(false);
  public backNav$ = this.backNavSubject.asObservable();

  private urlHistory: string[] = [];
  private currentIndex = -1; // pointer in the history stack

  constructor(private router: Router) {
    this.router.events
      .pipe(filter(e => e instanceof NavigationStart))
      .subscribe((event: NavigationStart & { navigationTrigger?: string }) => {
        const trigger = event.navigationTrigger;
        const currentUrl = event.url;

        if (trigger === 'popstate') {
          // Browser back or forward
          const existingIndex = this.urlHistory.indexOf(currentUrl);
          if (existingIndex < this.currentIndex) {
            // Moving back
            this.backNavSubject.next(true);
            console.log('⬅️ Browser BACK detected:', currentUrl);
          } else {
            this.backNavSubject.next(false);
          }
          this.currentIndex = existingIndex >= 0 ? existingIndex : this.currentIndex;
        } else {
          // Normal navigation
          // Remove forward history if any
          if (this.currentIndex < this.urlHistory.length - 1) {
            this.urlHistory = this.urlHistory.slice(0, this.currentIndex + 1);
          }

          // Add new URL
          this.urlHistory.push(currentUrl);
          this.currentIndex = this.urlHistory.length - 1;

          // Reset back flag
          this.backNavSubject.next(false);
        }
      });
  }

  public isBackNavigation(): boolean {
    return this.backNavSubject.getValue();
  }

  public getPreviousUrl(): string | null {
    return this.currentIndex > 0 ? this.urlHistory[this.currentIndex - 1] : null;
  }

  public getCurrentUrl(): string | null {
    return this.currentIndex >= 0 ? this.urlHistory[this.currentIndex] : null;
  }
}
