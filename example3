
import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { BehaviorSubject, fromEvent, merge } from 'rxjs';
import { filter, map, mapTo, pairwise, startWith } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class BackDetectorService {
  private backNavSubject = new BehaviorSubject<boolean>(false);
  public readonly backNav$ = this.backNavSubject.asObservable();

  private prevUrl: string | null = null;
  private currentUrl: string | null = null;

  constructor(private router: Router) {
    // Track URL history
    this.router.events
      .pipe(
        filter(event => event instanceof NavigationStart),
        map((event: NavigationStart) => event.url),
        startWith(this.router.url),
        pairwise() // gives [previous, current]
      )
      .subscribe(([prev, current]) => {
        this.prevUrl = prev;
        this.currentUrl = current;
      });

    // Detect browser back via Angular router
    const routerBack$ = this.router.events.pipe(
      filter(event => event instanceof NavigationStart),
      filter((event: any) => event.navigationTrigger === 'popstate'),
      mapTo(true)
    );

    // Detect native browser popstate too
    const browserBack$ = fromEvent(window, 'popstate').pipe(mapTo(true));

    // Merge both streams
    merge(routerBack$, browserBack$).subscribe(() => {
      this.backNavSubject.next(true);
      console.log('⬅️ Browser back detected');

      setTimeout(() => this.backNavSubject.next(false), 300); // auto reset
    });
  }

  /** Returns whether last navigation was browser back */
  public isBackNavigation(): boolean {
    return this.backNavSubject.getValue();
  }

  /** Returns the previously visited URL */
  public getPreviousUrl(): string | null {
    return this.prevUrl;
  }

  /** Returns the current URL */
  public getCurrentUrl(): string | null {
    return this.currentUrl;
  }
}
