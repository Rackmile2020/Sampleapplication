// member.reducer.ts
import { createReducer, on } from '@ngrx/store';
import { loadMemberSuccess } from './member.actions';

export interface MemberState {
  entities: { [memberId: string]: any }; // cache per memberId
}

export const initialState: MemberState = {
  entities: {}
};

export const memberReducer = createReducer(
  initialState,
  on(loadMemberSuccess, (state, { memberId, data }) => ({
    ...state,
    entities: {
      ...state.entities,
      [memberId]: data
    }
  }))
);
//QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
// member.actions.ts
import { createAction, props } from '@ngrx/store';

export const loadMember = createAction(
  '[Member] Load',
  props<{ memberId: string }>()
);

export const loadMemberSuccess = createAction(
  '[Member] Load Success',
  props<{ memberId: string, data: any }>()
);
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
// member.effects.ts
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { Store } from '@ngrx/store';
import { loadMember, loadMemberSuccess } from './member.actions';
import { switchMap, withLatestFrom, of, map } from 'rxjs';
import { MemberService } from '../services/member.service';
import { selectMemberById } from './member.selectors';

@Injectable()
export class MemberEffects {
  loadMember$ = createEffect(() =>
    this.actions$.pipe(
      ofType(loadMember),
      withLatestFrom((action) => this.store.select(selectMemberById(action.memberId))),
      switchMap(([action, cached]) => {
        if (cached) {
          // Already in store → don’t call API
          return of(loadMemberSuccess({ memberId: action.memberId, data: cached }));
        }
        // Call API if not cached
        return this.memberService.getMember(action.memberId).pipe(
          map(data => loadMemberSuccess({ memberId: action.memberId, data }))
        );
      })
    )
  );

  constructor(private actions$: Actions, private store: Store, private memberService: MemberService) {}
}
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
// member.selectors.ts
import { createSelector } from '@ngrx/store';
import { MemberState } from './member.reducer';

export const selectMemberState = (state: any) => state.member;

export const selectMemberById = (memberId: string) =>
  createSelector(selectMemberState, (state: MemberState) => state.entities[memberId]);
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ
  this.store.dispatch(loadMember({ memberId }));
      this.member$ = this.store.select(selectMemberById(memberId));


private escapeRegExp(text: string): string {
  return text.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}s
