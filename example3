// member.actions.ts
import { createAction, props } from '@ngrx/store';
import { Member } from '../models/member.model';

export const loadMember = createAction(
  '[Member] Load Member',
  props<{ memberId: string }>()
);

export const loadMemberSuccess = createAction(
  '[Member] Load Member Success',
  props<{ member: Member }>()
);

export const loadMemberFailure = createAction(
  '[Member] Load Member Failure',
  props<{ error: any }>()
);
// member.reducer.ts
import { createReducer, on } from '@ngrx/store';
import * as MemberActions from './member.actions';
import { Member } from '../models/member.model';

export interface MemberState {
  member: Member | null;
  loading: boolean;
  error: any;
}

export const initialState: MemberState = {
  member: null,
  loading: false,
  error: null
};
export const memberReducer = createReducer(
  initialState,

  // Start loading
  on(MemberActions.loadMember, (state, { memberId }) => ({
    ...state,
    loading: true,
    error: null
  })),

  // Success
  on(MemberActions.loadMemberSuccess, (state, { member }) => ({
    ...state,
    member,
    loading: false,
    error: null
  })),

  // Failure
  on(MemberActions.loadMemberFailure, (state, { error }) => ({
    ...state,
    loading: false,
    error
  }))
);
// member.effects.ts
import { Injectable } from '@angular/core';
import { Actions, createEffect, ofType } from '@ngrx/effects';
import { MemberService } from '../services/member.service';
import * as MemberActions from './member.actions';
import { catchError, map, mergeMap, of } from 'rxjs';

@Injectable()
export class MemberEffects {
  loadMember$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MemberActions.loadMember),
      mergeMap(({ memberId }) =>
        this.memberService.getMemberById(memberId).pipe(
          map(member => MemberActions.loadMemberSuccess({ member })),
          catchError(error => of(MemberActions.loadMemberFailure({ error })))
        )
      )
    )
  );

  constructor(
    private actions$: Actions,
    private memberService: MemberService
  ) {}
}
