import { Injectable } from '@angular/core';
import { Router, NavigationStart } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { filter } from 'rxjs/operators';

@Injectable({ providedIn: 'root' })
export class BackDetectorService {
  private backNavSubject = new BehaviorSubject<boolean>(false);
  public backNav$ = this.backNavSubject.asObservable();

  private urlHistory: string[] = [];
  private lastNavigationWasBack = false;

  constructor(private router: Router) {
    this.router.events
      .pipe(filter(e => e instanceof NavigationStart))
      .subscribe((event: NavigationStart & { navigationTrigger?: string }) => {
        const trigger = event.navigationTrigger;
        const currentUrl = event.url;
        const lastUrl = this.urlHistory[this.urlHistory.length - 1];

        // Normal navigation (push if new)
        if (lastUrl !== currentUrl) {
          this.urlHistory.push(currentUrl);
        }

        // Detect back only if trigger is popstate AND previous navigation was not back to same URL
        if (trigger === 'popstate' && !this.lastNavigationWasBack) {
          this.backNavSubject.next(true);
          console.log('⬅️ Browser BACK detected:', currentUrl);

          // Remove last URL from stack to maintain history
          this.urlHistory.pop();

          this.lastNavigationWasBack = true;
        } else {
          // Normal forward navigation or repeated visit
          this.backNavSubject.next(false);
          this.lastNavigationWasBack = false;
        }
      });
  }

  public isBackNavigation(): boolean {
    return this.backNavSubject.getValue();
  }

  public getPreviousUrl(): string | null {
    return this.urlHistory.length > 1
      ? this.urlHistory[this.urlHistory.length - 2]
      : null;
  }

  public getCurrentUrl(): string | null {
    return this.urlHistory.length
      ? this.urlHistory[this.urlHistory.length - 1]
      : null;
  }
}
