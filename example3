import { Injectable, Renderer2, RendererFactory2 } from '@angular/core';

@Injectable({ providedIn: 'root' })
export class FocusTrapService {
  private focusableEls: HTMLElement[] = [];
  private renderer: Renderer2;
  private cleanupFn: (() => void) | null = null;
  private activeBeforeTrap: HTMLElement | null = null;

  constructor(rendererFactory: RendererFactory2) {
    this.renderer = rendererFactory.createRenderer(null, null);
  }

  trapFocus(container: HTMLElement, onEscape?: () => void) {
    this.activeBeforeTrap = document.activeElement as HTMLElement;

    if (!container.hasAttribute('tabindex')) {
      container.setAttribute('tabindex', '-1');
    }

    container.focus(); // Ensure initial focus lands inside dialog

    this.focusableEls = Array.from(
      container.querySelectorAll<HTMLElement>(
        'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'
      )
    );

    this.cleanupFn = this.renderer.listen(container, 'keydown', (e: KeyboardEvent) => {
      if (e.key === 'Tab') this.handleTab(e);
      if (e.key === 'Escape' && onEscape) onEscape();
    });
  }

  private handleTab(event: KeyboardEvent) {
    const first = this.focusableEls[0];
    const last = this.focusableEls[this.focusableEls.length - 1];

    if (event.shiftKey && document.activeElement === first) {
      event.preventDefault();
      last.focus();
    } else if (!event.shiftKey && document.activeElement === last) {
      event.preventDefault();
      first.focus();
    }
  }

  releaseFocus() {
    if (this.cleanupFn) {
      this.cleanupFn();
      this.cleanupFn = null;
    }

    if (this.activeBeforeTrap) {
      this.activeBeforeTrap.focus();
      this.activeBeforeTrap = null;
    }
  }
}
