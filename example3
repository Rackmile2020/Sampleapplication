LoadSearch() {
  this.searchService.query$.subscribe((query) => {
    // Reset on each search
    this.sanitizedHtml = [];
    this.highlightedHeadings = [];

    if (!query) {
      return;
    }

    // Regex for plain text (headings, simple strings)
    const headingRegex = new RegExp(`(${query})`, "gi");

    // Regex for content â†’ only replace text nodes (between > and <)
    const contentRegex = new RegExp(`>([^<]*)(${query})([^<]*)<`, "gi");

    this.whatsCoveredData?.benefits?.forEach((item, index) => {
      let match = false;

      /** ðŸ”¹ Highlight heading */
      let heading = this.toTitleCaseIfAllCaps(item?.heading);
      if (heading && headingRegex.test(heading)) {
        heading = heading.replace(
          headingRegex,
          `<mark class="highlight">$1</mark>`
        );
        match = true;
        this.highlightedHeadings[index] = heading;
      }

      /** ðŸ”¹ Highlight content */
      let content = item.data;
      if (content && contentRegex.test(content)) {
        content = content.replace(
          contentRegex,
          (m, before, term, after) =>
            `>${before}<mark class="highlight">${term}</mark>${after}<`
        );
        match = true;
        this.sanitizedHtml[index] =
          this.sanitizer.bypassSecurityTrustHtml(content);
      }

      /** ðŸ”¹ Expand if matched */
      item.expanded = match;
    });
  });
}
