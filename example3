// membership.reducer.ts
export interface MembershipState {
  entities: { [memberId: string]: MemberEligibility };
  loading: boolean;
}

export const initialState: MembershipState = {
  entities: {},
  loading: false
};

export const membershipReducer = createReducer(
  initialState,
  on(MembershipActions.loadMembershipSuccess, (state, { memberId, data }) => ({
    ...state,
    entities: { ...state.entities, [memberId]: data },
    loading: false
  })),
  on(MembershipActions.loadMembership, (state) => ({
    ...state,
    loading: true
  }))
);

// membership.selectors.ts
export const selectMembershipEntities = createSelector(
  (state: AppState) => state.membership,
  (membership) => membership.entities
);

export const selectMembershipById = (memberId: string) =>
  createSelector(selectMembershipEntities, entities => entities[memberId]);


export const loadMembership = createAction(
  '[Membership] Load',
  props<{ memberId: string }>()
);

export const loadMembershipSuccess = createAction(
  '[Membership] Load Success',
  props<{ memberId: string; data: MemberEligibility }>()
);
@Injectable()
export class MembershipEffects {
  load$ = createEffect(() =>
    this.actions$.pipe(
      ofType(MembershipActions.loadMembership),
      mergeMap(({ memberId }) =>
        this.api.getMembership(memberId).pipe(
          map(data =>
            MembershipActions.loadMembershipSuccess({ memberId, data })
          )
        )
      )
    )
  );

  constructor(private actions$: Actions, private api: MembershipApiService) {}
}
@Injectable({ providedIn: 'root' })
export class MembershipFacade {
  constructor(private store: Store) {}

  getMembership(memberId: string): Observable<MemberEligibility> {
    return this.store.select(MembershipSelectors.selectMembershipById(memberId)).pipe(
      tap(data => {
        if (!data) {
          // If not in store, trigger API call via effect
          this.store.dispatch(MembershipActions.loadMembership({ memberId }));
        }
      }),
      filter((data): data is MemberEligibility => !!data), // skip null until loaded
      distinctUntilChanged()
    );
  }
}
@Injectable({ providedIn: 'root' })
export class EligibilityGuard implements CanActivateChild {
  constructor(private membershipFacade: MembershipFacade, private router: Router) {}

  canActivateChild(route: ActivatedRouteSnapshot): Observable<boolean> {
    const memberId = route.parent?.paramMap.get('id')!;
    return this.membershipFacade.getMembership(memberId).pipe(
      map(data => {
        if (!data.eligible) {
          this.router.navigate(['/home']);
          return false;
        }
        return true;
      })
    );
  }
}
