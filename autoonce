
autoOnceMany(
  streams: [string, ...any[]][],  // e.g. [['loadMemberShipResponse$', 'US'], ['loadUserResponse$', 123]]
  triggers: [string, ...any[]][], // e.g. [['requestloadMembershipShared', { region: 'US' }], ['requestLoadUserShared', { userId: 123 }]]
  callback: (...data: any[]) => void
) {
  const stream$ = combineLatest(
    streams.map(([name, ...args]) => this.stream(name, ...args))
  );

  stream$.subscribe(values => callback(...values));

  triggers.forEach(([name, ...args]) => this.call(name, ...args));
}
autoOnceMany(
  streams: (string | any[])[],       // ['name'] or ['name', arg1, arg2]
  triggers: (string | any[])[],      // same pattern for triggers
  callback: (...data: any[]) => void
) {
  const normalize = (item: any) => Array.isArray(item) ? item : [item];

  const stream$ = combineLatest(
    streams.map(s => {
      const [name, ...args] = normalize(s);
      return this.stream(name, ...args);
    })
  );

  stream$.subscribe(values => callback(...values));

  triggers.forEach(t => {
    const [name, ...args] = normalize(t);
    this.call(name, ...args);
  });
}
autoOnceMany(
  streams: [string, ...any[]][],                // e.g. ['loadMemberShipResponse$', 'US']
  triggers: [string, ...any[]][],               // e.g. ['requestloadMembershipShared', { region: 'US' }]
  callback: (...results: any[]) => void
) {
  // Convert each stream entry into an observable
  const observables = streams.map(([name, ...args]) =>
    this.stream(name, ...args).pipe(take(1)) // take only first non-null emission
  );

  // Subscribe to all at once
  combineLatest(observables).subscribe(values => callback(...values));

  // Trigger each one
  triggers.forEach(([name, ...args]) => this.call(name, ...args));
}
