@Injectable({ providedIn: 'root' })
export class DataBridgeService {
  private parentService: any;
  private cache = new Map<string, BehaviorSubject<any>>();

  constructor(private injector: Injector) {}

  async init() {
    if (this.parentService) return;

    const m = await loadRemoteModule({
      type: 'module',
      remoteEntry: 'http://localhost:4200/remoteEntry.js',
      exposedModule: './ShareStoreDataService'
    });

    const serviceClass = m.ShareStoreDataService;
    this.parentService = this.injector.get(serviceClass);
  }

  call(methodName: string, ...args: any[]) {
    const result = this.parentService?.[methodName]?.(...args);
    return result;
  }

  stream(methodName: string) {
    if (!this.cache.has(methodName)) {
      const subj = new BehaviorSubject<any>(null);
      this.parentService[methodName]().subscribe((data: any) => subj.next(data));
      this.cache.set(methodName, subj);
    }
    return this.cache.get(methodName)!.asObservable();
  }
}
//
// Call once
this.dataBridge.call('requestloadMembershipShared');

// Subscribe to any observable method
this.dataBridge.stream('loadMemberShipResponse$')
  .subscribe(data => console.log(data));
