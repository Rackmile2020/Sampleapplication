import { RouteReuseStrategy, DetachedRouteHandle, ActivatedRouteSnapshot } from '@angular/router';

export class CustomReuseStrategy implements RouteReuseStrategy {
  private storedHandles = new Map<string, DetachedRouteHandle>();

  // Decide if this route should be stored
  shouldDetach(route: ActivatedRouteSnapshot): boolean {
    return !!route.data['reuse'];
  }

  // Store the handle
  store(route: ActivatedRouteSnapshot, handle: DetachedRouteHandle): void {
    const key = this.getRouteKey(route);
    if (key) {
      this.storedHandles.set(key, handle);
    }
  }

  // Decide if this route should be reattached
  shouldAttach(route: ActivatedRouteSnapshot): boolean {
    const key = this.getRouteKey(route);
    return !!key && this.storedHandles.has(key);
  }

  // Retrieve stored handle
  retrieve(route: ActivatedRouteSnapshot): DetachedRouteHandle | null {
    const key = this.getRouteKey(route);
    return key ? this.storedHandles.get(key) || null : null;
  }

  // When to reuse route
  shouldReuseRoute(future: ActivatedRouteSnapshot, curr: ActivatedRouteSnapshot): boolean {
    // Reuse if route config is same
    return future.routeConfig === curr.routeConfig;
  }

  // Generate a unique key per route + params
  private getRouteKey(route: ActivatedRouteSnapshot): string | null {
    if (!route.routeConfig || !route.data['reuse']) return null;

    // For dynamic id param reuse logic
    const id = route.params['id'] || '';
    const path = route.routeConfig.path || '';
    return `${path}-${id}`;
  }
}
