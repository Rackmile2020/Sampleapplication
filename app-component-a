import { Component, OnInit } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { CommonModule } from '@angular/common';
import { SearchService } from '../search.service';

@Component({
  selector: 'app-component-a',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './component-a.component.html',
  styleUrl: './component-a.component.css',
})
export class ComponentAComponent implements OnInit {
  befits = [
    {
      id: 36,
      heading: 'Sample Heading',
      data: `<div><p>This is a searchable paragraph.</p></div>`,
      expanded: false,
    },
    {
      id: 37,
      heading: 'Test Title',
      data: `<div><p>Testing the heading and data match!</p></div>`,
      expanded: false,
    }
  ];

  sanitizedHtml: SafeHtml[] = [];
  highlightedHeadings: string[] = [];

  constructor(
    private searchService: SearchService,
    private sanitizer: DomSanitizer
  ) {}

  ngOnInit() {
    this.searchService.query$.subscribe((query) => {
      const allMatches: HTMLElement[] = [];
      const regex = new RegExp(`(${query})`, 'gi');

      this.sanitizedHtml = [];
      this.highlightedHeadings = [];

      this.befits.forEach((item, index) => {
        let hasMatch = false;

        // Heading match
        let highlightedHeading = item.heading;
        if (query && item.heading.match(regex)) {
          highlightedHeading = item.heading.replace(regex, `<mark class="highlight">$1</mark>`);
          hasMatch = true;
        }

        // Data match
        let highlightedData = item.data;
        if (query && item.data.match(regex)) {
          highlightedData = item.data.replace(regex, `<mark class="highlight">$1</mark>`);
          hasMatch = true;
        }

        this.highlightedHeadings[index] = highlightedHeading;
        this.sanitizedHtml[index] = this.sanitizer.bypassSecurityTrustHtml(highlightedData);
        item.expanded = hasMatch;
      });

      setTimeout(() => {
        const matches = Array.from(document.querySelectorAll('.highlight')) as HTMLElement[];
        this.searchService.registerMatches(matches);
      });
    });
  }
}
