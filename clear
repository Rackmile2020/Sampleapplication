clear() {
  this.searchText = '';
  this.searchService.clearSearch();

  // Trigger cleanup manually (optional depending on searchTerm$ update propagation)
  setTimeout(() => {
    const allDrawers = document.querySelectorAll('app-shared-accordion');
    allDrawers.forEach((accordion: any) => {
      const componentInstance = (accordion as any).__ngContext__?.[8];
      if (componentInstance?.data) {
        componentInstance.data.forEach((item: any) => {
          if (item.searchOpened) {
            item.expanded = false;
            item.searchOpened = false;
          }
        });
      }
    });
  });
}
ngOnInit() {
  this.searchService.searchTerm$.subscribe(term => {
    const matches: HTMLElement[] = [];

    this.data.forEach(item => {
      const regex = new RegExp(term, 'gi');

      if (term && (regex.test(item.title) || regex.test(item.body))) {
        if (!item.expanded) {
          item.expanded = true;
          item.searchOpened = true;
        }
      } else if (item.searchOpened) {
        // If clearing or no match, mark for later cleanup
        item.searchOpened = false;
      }
    });

    setTimeout(() => {
      const elements = this.el.nativeElement.querySelectorAll('.highlight');
      elements.forEach(el => el.classList.remove('active-match'));
      this.searchService.registerMatches(Array.from(elements));
    });
  });
}
getValueByKeyInsensitive(key: string): string | null {
  const lowerKey = key.toLowerCase();
  const item = data.find(obj => Object.keys(obj)[0].toLowerCase() === lowerKey);
  return item ? item[Object.keys(item)[0]].value : null;
}
